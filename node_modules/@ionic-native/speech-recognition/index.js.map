{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/speech-recognition/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,OAAO,EAAE,iBAAiB,EAAE,MAAM,EAAE,MAAM,oBAAoB,CAAC;AACxE,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA2GN,qCAAiB;;;;IACtD;;;OAGG;;;;;IAEH,kDAAsB;;;;;QACpB,MAAM,CAAC;KACR;IAED;;;OAGG;;;;;IAKH,0CAAc;;;;cACZ,OAA2C;QAE3C,MAAM,CAAC;KACR;IAED;;OAEG;;;;IAEH,yCAAa;;;;QACX,MAAM,CAAC;KACR;IAED;;;OAGG;;;;;IAEH,iDAAqB;;;;;QACnB,MAAM,CAAC;KACR;IAED;;;OAGG;;;;;IAEH,yCAAa;;;;;QACX,MAAM,CAAC;KACR;IAED;;;OAGG;;;;;IAEH,6CAAiB;;;;;QACf,MAAM,CAAC;KACR;;gBA1DF,UAAU;;;QAMR,OAAO,EAAE;;;;mEAGT;;QAMA,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;YACxB,UAAU,EAAE,IAAI;SACjB,CAAC;;;wCAGC,UAAU;2DAEZ;;QAKA,OAAO,EAAE;;;;0DAGT;;QAMA,OAAO,EAAE;;;;kEAGT;;QAMA,OAAO,EAAE;;;;0DAGT;;QAMA,OAAO,EAAE;;;;8DAGT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAzDU,iBAAiB;QAR7B,MAAM,CAAC;YACN,UAAU,EAAE,mBAAmB;YAC/B,MAAM,EAAE,kCAAkC;YAC1C,SAAS,EAAE,2BAA2B;YACtC,IAAI,EAAE,8DAA8D;YACpE,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;SAC9B,CAAC;OAEW,iBAAiB,EA0D7B;4BAvKD;EA6GuC,iBAAiB;SAA3C,iBAAiB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\nexport type SpeechRecognitionListeningOptions =\n  | SpeechRecognitionListeningOptionsIOS\n  | SpeechRecognitionListeningOptionsAndroid;\n\nexport interface SpeechRecognitionListeningOptionsIOS {\n  /**\n   * used language for recognition (default `\"en-US\"`)\n   */\n  language?: string;\n\n  /**\n   * umber of return matches (default `5`)\n   */\n  matches?: number;\n\n  /**\n   * Allow partial results to be returned (default `false`)\n   */\n  showPartial?: boolean;\n}\n\nexport interface SpeechRecognitionListeningOptionsAndroid {\n  /**\n   * used language for recognition (default `\"en-US\"`)\n   */\n  language?: string;\n\n  /**\n   * number of return matches (maximum number of matches)\n   */\n  matches?: number;\n\n  /**\n   * displayed prompt of listener popup window\n   */\n  prompt?: string;\n\n  /**\n   * display listener popup window with prompt (default `true`)\n   */\n  showPopup?: boolean;\n\n  /**\n   * Allow partial results to be returned (default `false`)\n   */\n  showPartial?: boolean;\n}\n\n/**\n * @name Speech Recognition\n * @description\n * This plugin does speech recognition using cloud services\n *\n * @usage\n * ```typescript\n * import { SpeechRecognition } from '@ionic-native/speech-recognition';\n *\n * constructor(private speechRecognition: SpeechRecognition) { }\n *\n * ...\n *\n *\n *\n * // Check feature available\n * this.speechRecognition.isRecognitionAvailable()\n *   .then((available: boolean) => console.log(available))\n *\n * // Start the recognition process\n * this.speechRecognition.startListening(options)\n *   .subscribe(\n *     (matches: Array<string>) => console.log(matches),\n *     (onerror) => console.log('error:', onerror)\n *   )\n *\n * // Stop the recognition process (iOS only)\n * this.speechRecognition.stopListening()\n *\n * // Get the list of supported languages\n * this.speechRecognition.getSupportedLanguages()\n *   .then(\n *     (languages: Array<string>) => console.log(languages),\n *     (error) => console.log(error)\n *   )\n *\n * // Check permission\n * this.speechRecognition.hasPermission()\n *   .then((hasPermission: boolean) => console.log(hasPermission))\n *\n * // Request permissions\n * this.speechRecognition.requestPermission()\n *   .then(\n *     () => console.log('Granted'),\n *     () => console.log('Denied')\n *   )\n *\n * ```\n */\n@Plugin({\n  pluginName: 'SpeechRecognition',\n  plugin: 'cordova-plugin-speechrecognition',\n  pluginRef: 'plugins.speechRecognition',\n  repo: 'https://github.com/pbakondy/cordova-plugin-speechrecognition',\n  platforms: ['Android', 'iOS']\n})\n@Injectable()\nexport class SpeechRecognition extends IonicNativePlugin {\n  /**\n   * Check feature available\n   * @return {Promise<boolean>}\n   */\n  @Cordova()\n  isRecognitionAvailable(): Promise<boolean> {\n    return;\n  }\n\n  /**\n   * Start the recognition process\n   * @return {Promise< Array<string> >} list of recognized terms\n   */\n  @Cordova({\n    callbackOrder: 'reverse',\n    observable: true\n  })\n  startListening(\n    options?: SpeechRecognitionListeningOptions\n  ): Observable<string[]> {\n    return;\n  }\n\n  /**\n   * Stop the recognition process\n   */\n  @Cordova()\n  stopListening(): Promise<void> {\n    return;\n  }\n\n  /**\n   * Get the list of supported languages\n   * @return {Promise< Array<string> >} list of languages\n   */\n  @Cordova()\n  getSupportedLanguages(): Promise<string[]> {\n    return;\n  }\n\n  /**\n   * Check permission\n   * @return {Promise<boolean>} has permission\n   */\n  @Cordova()\n  hasPermission(): Promise<boolean> {\n    return;\n  }\n\n  /**\n   * Request permissions\n   * @return {Promise<void>}\n   */\n  @Cordova()\n  requestPermission(): Promise<void> {\n    return;\n  }\n}\n"]}