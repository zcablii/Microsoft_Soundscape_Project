var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordovaFunctionOverride, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var ThreeDeeTouchOriginal = /** @class */ (function (_super) {
    __extends(ThreeDeeTouchOriginal, _super);
    function ThreeDeeTouchOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThreeDeeTouchOriginal.prototype.isAvailable = function () { return cordova(this, "isAvailable", {}, arguments); };
    ThreeDeeTouchOriginal.prototype.watchForceTouches = function () { return cordova(this, "watchForceTouches", { "observable": true }, arguments); };
    ThreeDeeTouchOriginal.prototype.configureQuickActions = function (quickActions) { return cordova(this, "configureQuickActions", { "sync": true }, arguments); };
    ThreeDeeTouchOriginal.prototype.onHomeIconPressed = function () { return cordovaFunctionOverride(this, "onHomeIconPressed", {}, arguments); };
    ThreeDeeTouchOriginal.prototype.enableLinkPreview = function () { return cordova(this, "enableLinkPreview", { "sync": true }, arguments); };
    ThreeDeeTouchOriginal.prototype.disableLinkPreview = function () { return cordova(this, "disableLinkPreview", { "sync": true }, arguments); };
    ThreeDeeTouchOriginal.pluginName = "ThreeDeeTouch";
    ThreeDeeTouchOriginal.plugin = "cordova-plugin-3dtouch";
    ThreeDeeTouchOriginal.pluginRef = "ThreeDeeTouch";
    ThreeDeeTouchOriginal.repo = "https://github.com/EddyVerbruggen/cordova-plugin-3dtouch";
    ThreeDeeTouchOriginal.platforms = ["iOS"];
    return ThreeDeeTouchOriginal;
}(IonicNativePlugin));
var ThreeDeeTouch = new ThreeDeeTouchOriginal();
export { ThreeDeeTouch };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3RocmVlLWRlZS10b3VjaC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyx1REFBK0QsTUFBTSxvQkFBb0IsQ0FBQztBQUNqRyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOztJQStIQyxpQ0FBaUI7Ozs7SUFNbEQsbUNBQVc7SUFXWCx5Q0FBaUI7SUFlakIsNkNBQXFCLGFBQUMsWUFBd0M7SUFPOUQseUNBQWlCO0lBV2pCLHlDQUFpQjtJQVFqQiwwQ0FBa0I7Ozs7Ozt3QkEzTHBCO0VBaUltQyxpQkFBaUI7U0FBdkMsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIENvcmRvdmFGdW5jdGlvbk92ZXJyaWRlLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGludGVyZmFjZSBUaHJlZURlZVRvdWNoUXVpY2tBY3Rpb24ge1xuICAvKipcbiAgICogVHlwZSB0aGF0IGNhbiBiZSB1c2VkIGluIHRoZSBvbkhvbWVJY29uUHJlc3NlZCBjYWxsYmFja1xuICAgKi9cbiAgdHlwZT86IHN0cmluZztcblxuICAvKipcbiAgICogVGl0bGVcbiAgICovXG4gIHRpdGxlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFN1YnRpdGxlXG4gICAqL1xuICBzdWJ0aXRsZT86IHN0cmluZztcblxuICAvKipcbiAgICogSWNvbiB0eXBlLiBDYXNlIGluc2Vuc2l0aXZlXG4gICAqL1xuICBpY29uVHlwZT86IHN0cmluZztcblxuICAvKipcbiAgICogSWNvbiB0ZW1wbGF0ZVxuICAgKi9cbiAgaWNvblRlbXBsYXRlPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRocmVlRGVlVG91Y2hGb3JjZVRvdWNoIHtcbiAgLyoqXG4gICAqIFRvdWNoIGZvcmNlXG4gICAqL1xuICBmb3JjZTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaW1lc3RhbXAgb2YgYWN0aW9uXG4gICAqL1xuICB0aW1lc3RhbXA6IG51bWJlcjtcblxuICAvKipcbiAgICogWCBjb29yZGluYXRlIG9mIGFjdGlvblxuICAgKi9cbiAgeDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBZIGNvb3JkaW5hdGUgb2YgYWN0aW9uXG4gICAqL1xuICB5OiBudW1iZXI7XG59XG5cbi8qKlxuICogQG5hbWUgM0QgVG91Y2hcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIDNEIFRvdWNoIHBsdWdpbiBhZGRzIDNEIFRvdWNoIGNhcGFiaWxpdGllcyB0byB5b3VyIENvcmRvdmEgYXBwLlxuICpcbiAqIFJlcXVpcmVzIENvcmRvdmEgcGx1Z2luOiBgY29yZG92YS1wbHVnaW4tM2R0b3VjaGAuIEZvciBtb3JlIGluZm8sIHBsZWFzZSBzZWUgdGhlIFszRCBUb3VjaCBwbHVnaW4gZG9jc10oaHR0cHM6Ly9naXRodWIuY29tL0VkZHlWZXJicnVnZ2VuL2NvcmRvdmEtcGx1Z2luLTNkdG91Y2gpLlxuICpcbiAqIEB1c2FnZVxuICogUGxlYXNlIGRvIHJlZmVyIHRvIHRoZSBvcmlnaW5hbCBwbHVnaW4ncyByZXBvIGZvciBkZXRhaWxlZCB1c2FnZS4gVGhlIHVzYWdlIGV4YW1wbGUgaGVyZSBtaWdodCBub3QgYmUgc3VmZmljaWVudC5cbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IFRocmVlRGVlVG91Y2gsIFRocmVlRGVlVG91Y2hRdWlja0FjdGlvbiwgVGhyZWVEZWVUb3VjaEZvcmNlVG91Y2ggfSBmcm9tICdAaW9uaWMtbmF0aXZlL3RocmVlLWRlZS10b3VjaC9uZ3gnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgdGhyZWVEZWVUb3VjaDogVGhyZWVEZWVUb3VjaCkgeyB9XG4gKlxuICogLi4uXG4gKlxuICogdGhpcy50aHJlZURlZVRvdWNoLmlzQXZhaWxhYmxlKCkudGhlbihpc0F2YWlsYWJsZSA9PiBjb25zb2xlLmxvZygnM0QgVG91Y2ggYXZhaWxhYmxlPyAnICsgaXNBdmFpbGFibGUpKTtcbiAqXG4gKiB0aGlzLnRocmVlRGVlVG91Y2gud2F0Y2hGb3JjZVRvdWNoZXMoKVxuICogICAuc3Vic2NyaWJlKFxuICogICAgIChkYXRhOiBUaHJlZURlZVRvdWNoRm9yY2VUb3VjaCkgPT4ge1xuICogICAgICAgY29uc29sZS5sb2coJ0ZvcmNlIHRvdWNoICUnICsgZGF0YS5mb3JjZSk7XG4gKiAgICAgICBjb25zb2xlLmxvZygnRm9yY2UgdG91Y2ggdGltZXN0YW1wOiAnICsgZGF0YS50aW1lc3RhbXApO1xuICogICAgICAgY29uc29sZS5sb2coJ0ZvcmNlIHRvdWNoIHg6ICcgKyBkYXRhLngpO1xuICogICAgICAgY29uc29sZS5sb2coJ0ZvcmNlIHRvdWNoIHk6ICcgKyBkYXRhLnkpO1xuICogICAgIH1cbiAqICAgKTtcbiAqXG4gKlxuICogbGV0IGFjdGlvbnM6IFRocmVlRGVlVG91Y2hRdWlja0FjdGlvbltdID0gW1xuICogICB7XG4gKiAgICAgdHlwZTogJ2NoZWNraW4nLFxuICogICAgIHRpdGxlOiAnQ2hlY2sgaW4nLFxuICogICAgIHN1YnRpdGxlOiAnUXVpY2tseSBjaGVjayBpbicsXG4gKiAgICAgaWNvblR5cGU6ICdDb21wb3NlJ1xuICogICB9LFxuICogICB7XG4gKiAgICAgdHlwZTogJ3NoYXJlJyxcbiAqICAgICB0aXRsZTogJ1NoYXJlJyxcbiAqICAgICBzdWJ0aXRsZTogJ1NoYXJlIGxpa2UgeW91IGNhcmUnLFxuICogICAgIGljb25UeXBlOiAnU2hhcmUnXG4gKiAgIH0sXG4gKiAgIHtcbiAqICAgICB0eXBlOiAnc2VhcmNoJyxcbiAqICAgICB0aXRsZTogJ1NlYXJjaCcsXG4gKiAgICAgaWNvblR5cGU6ICdTZWFyY2gnXG4gKiAgIH0sXG4gKiAgIHtcbiAqICAgICB0aXRsZTogJ1Nob3cgZmF2b3JpdGVzJyxcbiAqICAgICBpY29uVGVtcGxhdGU6ICdIZWFydFRlbXBsYXRlJ1xuICogICB9XG4gKiBdO1xuICpcbiAqIHRoaXMudGhyZWVEZWVUb3VjaC5jb25maWd1cmVRdWlja0FjdGlvbnMoYWN0aW9ucyk7XG4gKlxuICogdGhpcy50aHJlZURlZVRvdWNoLm9uSG9tZUljb25QcmVzc2VkKCkuc3Vic2NyaWJlKFxuICogIChwYXlsb2FkKSA9PiB7XG4gKiAgICAvLyByZXR1cm5zIGFuIG9iamVjdCB0aGF0IGlzIHRoZSBidXR0b24geW91IHByZXNlZFxuICogICAgY29uc29sZS5sb2coJ1ByZXNzZWQgdGhlICR7cGF5bG9hZC50aXRsZX0gYnV0dG9uJylcbiAqICAgIGNvbnNvbGUubG9nKHBheWxvYWQudHlwZSlcbiAqXG4gKiAgfVxuICogKVxuICogYGBgXG4gKiBAaW50ZXJmYWNlc1xuICogVGhyZWVEZWVUb3VjaFF1aWNrQWN0aW9uXG4gKiBUaHJlZURlZVRvdWNoRm9yY2VUb3VjaFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ1RocmVlRGVlVG91Y2gnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi0zZHRvdWNoJyxcbiAgcGx1Z2luUmVmOiAnVGhyZWVEZWVUb3VjaCcsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vRWRkeVZlcmJydWdnZW4vY29yZG92YS1wbHVnaW4tM2R0b3VjaCcsXG4gIHBsYXRmb3JtczogWydpT1MnXVxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUaHJlZURlZVRvdWNoIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogWW91IG5lZWQgYW4gaVBob25lIDZTIG9yIHNvbWUgZnV0dXJlIHRlY2ggdG8gdXNlIHRoZSBmZWF0dXJlcyBvZiB0aGlzIHBsdWdpbiwgc28geW91IGNhbiBjaGVjayBhdCBydW50aW1lIGlmIHRoZSB1c2VyJ3MgZGV2aWNlIGlzIHN1cHBvcnRlZC5cbiAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59IHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhIGJvb2xlYW4gdGhhdCBpbmRpY2F0ZXMgd2hldGhlciB0aGUgcGx1Z2luIGlzIGF2YWlsYWJsZSBvciBub3RcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaXNBdmFpbGFibGUoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFlvdSBjYW4gZ2V0IGEgbm90aWZpY2F0aW9uIHdoZW4gdGhlIHVzZXIgZm9yY2UgdG91Y2hlcyB0aGUgd2Vidmlldy4gVGhlIHBsdWdpbiBkZWZpbmVzIGEgRm9yY2UgVG91Y2ggd2hlbiBhdCBsZWFzdCA3NSUgb2YgdGhlIG1heGltdW0gZm9yY2UgaXMgYXBwbGllZCB0byB0aGUgc2NyZWVuLiBZb3VyIGFwcCB3aWxsIHJlY2VpdmUgdGhlIHggYW5kIHkgY29vcmRpbmF0ZXMsIHNvIHlvdSBoYXZlIHRvIGZpZ3VyZSBvdXQgd2hpY2ggVUkgZWxlbWVudCB3YXMgdG91Y2hlZC5cbiAgICogQHJldHVybnMge09ic2VydmFibGU8VGhyZWVEZWVUb3VjaEZvcmNlVG91Y2g+fSBSZXR1cm5zIGFuIG9ic2VydmFibGUgdGhhdCBzZW5kcyBhIGBUaHJlZURlZVRvdWNoRm9yY2VUb3VjaGAgb2JqZWN0XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgb2JzZXJ2YWJsZTogdHJ1ZVxuICB9KVxuICB3YXRjaEZvcmNlVG91Y2hlcygpOiBPYnNlcnZhYmxlPFRocmVlRGVlVG91Y2hGb3JjZVRvdWNoPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIHNldHVwIHRoZSAzRC10b3VjaCBhY3Rpb25zLCB0YWtlcyBhbiBhcnJheSBvZiBvYmplY3RzIHdpdGggdGhlIGZvbGxvd2luZ1xuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAob3B0aW9uYWwpIEEgdHlwZSB0aGF0IGNhbiBiZSB1c2VkIGBvbkhvbWVJY29uUHJlc3NlZGAgY2FsbGJhY2tcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRpdGxlIFRpdGxlIGZvciB5b3VyIGFjdGlvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3VidGl0bGUgKG9wdGlvbmFsKSBBIHNob3J0IGRlc2NyaXB0aW9uIGZvciB5b3VyIGFjdGlvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWNvblR5cGUgKG9wdGlvbmFsKSBDaG9vc2UgYmV0d2VlbiBQcm9oaWJpdCwgQ29udGFjdCwgSG9tZSwgTWFya0xvY2F0aW9uLCBGYXZvcml0ZSwgTG92ZSwgQ2xvdWQsIEludml0YXRpb24sIENvbmZpcm1hdGlvbiwgTWFpbCwgTWVzc2FnZSwgRGF0ZSwgVGltZSwgQ2FwdHVyZVBob3RvLCBDYXB0dXJlVmlkZW8sIFRhc2ssIFRhc2tDb21wbGV0ZWQsIEFsYXJtLCBCb29rbWFyaywgU2h1ZmZsZSwgQXVkaW8sIFVwZGF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWNvblRlbXBsYXRlIChvcHRpb25hbCkgQ2FuIGJlIHVzZWQgdG8gcHJvdmlkZSB5b3VyIG93biBpY29uXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3luYzogdHJ1ZVxuICB9KVxuICBjb25maWd1cmVRdWlja0FjdGlvbnMocXVpY2tBY3Rpb25zOiBUaHJlZURlZVRvdWNoUXVpY2tBY3Rpb25bXSk6IHZvaWQgeyB9XG5cbiAgLyoqXG4gICAqIFdoZW4gYSBob21lIGljb24gaXMgcHJlc3NlZCwgeW91ciBhcHAgbGF1bmNoZXMgYW5kIHRoaXMgSlMgY2FsbGJhY2sgaXMgaW52b2tlZC5cbiAgICogQHJldHVybnMge09ic2VydmFibGU8YW55Pn0gcmV0dXJucyBhbiBvYnNlcnZhYmxlIHRoYXQgbm90aWZpZXMgeW91IHdoZW4gaGUgdXNlciBwcmVzc2VzIG9uIHRoZSBob21lIHNjcmVlbiBpY29uXG4gICAqL1xuICBAQ29yZG92YUZ1bmN0aW9uT3ZlcnJpZGUoKVxuICBvbkhvbWVJY29uUHJlc3NlZCgpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBFbmFibGUgTGluayBQcmV2aWV3LlxuICAgKiBVSVdlYlZpZXcgYW5kIFdLV2ViVmlldyAodGhlIHdlYnZpZXdzIHBvd2VyaW5nIENvcmRvdmEgYXBwcykgZG9uJ3QgYWxsb3cgdGhlIGZhbmN5IG5ldyBsaW5rIHByZXZpZXcgZmVhdHVyZSBvZiBpT1M5LlxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN5bmM6IHRydWVcbiAgfSlcbiAgZW5hYmxlTGlua1ByZXZpZXcoKTogdm9pZCB7fVxuXG4gIC8qKlxuICAgKiBEaXNhYmxlZCB0aGUgbGluayBwcmV2aWV3IGZlYXR1cmUsIGlmIGVuYWJsZWQuXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3luYzogdHJ1ZVxuICB9KVxuICBkaXNhYmxlTGlua1ByZXZpZXcoKTogdm9pZCB7fVxufVxuIl19