var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordovaFunctionOverride, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var ThreeDeeTouch = /** @class */ (function (_super) {
    __extends(ThreeDeeTouch, _super);
    function ThreeDeeTouch() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThreeDeeTouch.prototype.isAvailable = function () { return cordova(this, "isAvailable", {}, arguments); };
    ThreeDeeTouch.prototype.watchForceTouches = function () { return cordova(this, "watchForceTouches", { "observable": true }, arguments); };
    ThreeDeeTouch.prototype.configureQuickActions = function (quickActions) { return cordova(this, "configureQuickActions", { "sync": true }, arguments); };
    ThreeDeeTouch.prototype.onHomeIconPressed = function () { return cordovaFunctionOverride(this, "onHomeIconPressed", {}, arguments); };
    ThreeDeeTouch.prototype.enableLinkPreview = function () { return cordova(this, "enableLinkPreview", { "sync": true }, arguments); };
    ThreeDeeTouch.prototype.disableLinkPreview = function () { return cordova(this, "disableLinkPreview", { "sync": true }, arguments); };
    ThreeDeeTouch.pluginName = "ThreeDeeTouch";
    ThreeDeeTouch.plugin = "cordova-plugin-3dtouch";
    ThreeDeeTouch.pluginRef = "ThreeDeeTouch";
    ThreeDeeTouch.repo = "https://github.com/EddyVerbruggen/cordova-plugin-3dtouch";
    ThreeDeeTouch.platforms = ["iOS"];
    ThreeDeeTouch = __decorate([
        Injectable()
    ], ThreeDeeTouch);
    return ThreeDeeTouch;
}(IonicNativePlugin));
export { ThreeDeeTouch };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3RocmVlLWRlZS10b3VjaC9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyx1REFBK0QsTUFBTSxvQkFBb0IsQ0FBQztBQUNqRyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOztJQStIQyxpQ0FBaUI7Ozs7SUFNbEQsbUNBQVc7SUFXWCx5Q0FBaUI7SUFlakIsNkNBQXFCLGFBQUMsWUFBd0M7SUFPOUQseUNBQWlCO0lBV2pCLHlDQUFpQjtJQVFqQiwwQ0FBa0I7Ozs7OztJQTFEUCxhQUFhO1FBRHpCLFVBQVUsRUFBRTtPQUNBLGFBQWE7d0JBakkxQjtFQWlJbUMsaUJBQWlCO1NBQXZDLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBDb3Jkb3ZhRnVuY3Rpb25PdmVycmlkZSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGhyZWVEZWVUb3VjaFF1aWNrQWN0aW9uIHtcbiAgLyoqXG4gICAqIFR5cGUgdGhhdCBjYW4gYmUgdXNlZCBpbiB0aGUgb25Ib21lSWNvblByZXNzZWQgY2FsbGJhY2tcbiAgICovXG4gIHR5cGU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRpdGxlXG4gICAqL1xuICB0aXRsZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBTdWJ0aXRsZVxuICAgKi9cbiAgc3VidGl0bGU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEljb24gdHlwZS4gQ2FzZSBpbnNlbnNpdGl2ZVxuICAgKi9cbiAgaWNvblR5cGU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEljb24gdGVtcGxhdGVcbiAgICovXG4gIGljb25UZW1wbGF0ZT86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUaHJlZURlZVRvdWNoRm9yY2VUb3VjaCB7XG4gIC8qKlxuICAgKiBUb3VjaCBmb3JjZVxuICAgKi9cbiAgZm9yY2U6IG51bWJlcjtcblxuICAvKipcbiAgICogVGltZXN0YW1wIG9mIGFjdGlvblxuICAgKi9cbiAgdGltZXN0YW1wOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFggY29vcmRpbmF0ZSBvZiBhY3Rpb25cbiAgICovXG4gIHg6IG51bWJlcjtcblxuICAvKipcbiAgICogWSBjb29yZGluYXRlIG9mIGFjdGlvblxuICAgKi9cbiAgeTogbnVtYmVyO1xufVxuXG4vKipcbiAqIEBuYW1lIDNEIFRvdWNoXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSAzRCBUb3VjaCBwbHVnaW4gYWRkcyAzRCBUb3VjaCBjYXBhYmlsaXRpZXMgdG8geW91ciBDb3Jkb3ZhIGFwcC5cbiAqXG4gKiBSZXF1aXJlcyBDb3Jkb3ZhIHBsdWdpbjogYGNvcmRvdmEtcGx1Z2luLTNkdG91Y2hgLiBGb3IgbW9yZSBpbmZvLCBwbGVhc2Ugc2VlIHRoZSBbM0QgVG91Y2ggcGx1Z2luIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9FZGR5VmVyYnJ1Z2dlbi9jb3Jkb3ZhLXBsdWdpbi0zZHRvdWNoKS5cbiAqXG4gKiBAdXNhZ2VcbiAqIFBsZWFzZSBkbyByZWZlciB0byB0aGUgb3JpZ2luYWwgcGx1Z2luJ3MgcmVwbyBmb3IgZGV0YWlsZWQgdXNhZ2UuIFRoZSB1c2FnZSBleGFtcGxlIGhlcmUgbWlnaHQgbm90IGJlIHN1ZmZpY2llbnQuXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBUaHJlZURlZVRvdWNoLCBUaHJlZURlZVRvdWNoUXVpY2tBY3Rpb24sIFRocmVlRGVlVG91Y2hGb3JjZVRvdWNoIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS90aHJlZS1kZWUtdG91Y2gvbmd4JztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHRocmVlRGVlVG91Y2g6IFRocmVlRGVlVG91Y2gpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIHRoaXMudGhyZWVEZWVUb3VjaC5pc0F2YWlsYWJsZSgpLnRoZW4oaXNBdmFpbGFibGUgPT4gY29uc29sZS5sb2coJzNEIFRvdWNoIGF2YWlsYWJsZT8gJyArIGlzQXZhaWxhYmxlKSk7XG4gKlxuICogdGhpcy50aHJlZURlZVRvdWNoLndhdGNoRm9yY2VUb3VjaGVzKClcbiAqICAgLnN1YnNjcmliZShcbiAqICAgICAoZGF0YTogVGhyZWVEZWVUb3VjaEZvcmNlVG91Y2gpID0+IHtcbiAqICAgICAgIGNvbnNvbGUubG9nKCdGb3JjZSB0b3VjaCAlJyArIGRhdGEuZm9yY2UpO1xuICogICAgICAgY29uc29sZS5sb2coJ0ZvcmNlIHRvdWNoIHRpbWVzdGFtcDogJyArIGRhdGEudGltZXN0YW1wKTtcbiAqICAgICAgIGNvbnNvbGUubG9nKCdGb3JjZSB0b3VjaCB4OiAnICsgZGF0YS54KTtcbiAqICAgICAgIGNvbnNvbGUubG9nKCdGb3JjZSB0b3VjaCB5OiAnICsgZGF0YS55KTtcbiAqICAgICB9XG4gKiAgICk7XG4gKlxuICpcbiAqIGxldCBhY3Rpb25zOiBUaHJlZURlZVRvdWNoUXVpY2tBY3Rpb25bXSA9IFtcbiAqICAge1xuICogICAgIHR5cGU6ICdjaGVja2luJyxcbiAqICAgICB0aXRsZTogJ0NoZWNrIGluJyxcbiAqICAgICBzdWJ0aXRsZTogJ1F1aWNrbHkgY2hlY2sgaW4nLFxuICogICAgIGljb25UeXBlOiAnQ29tcG9zZSdcbiAqICAgfSxcbiAqICAge1xuICogICAgIHR5cGU6ICdzaGFyZScsXG4gKiAgICAgdGl0bGU6ICdTaGFyZScsXG4gKiAgICAgc3VidGl0bGU6ICdTaGFyZSBsaWtlIHlvdSBjYXJlJyxcbiAqICAgICBpY29uVHlwZTogJ1NoYXJlJ1xuICogICB9LFxuICogICB7XG4gKiAgICAgdHlwZTogJ3NlYXJjaCcsXG4gKiAgICAgdGl0bGU6ICdTZWFyY2gnLFxuICogICAgIGljb25UeXBlOiAnU2VhcmNoJ1xuICogICB9LFxuICogICB7XG4gKiAgICAgdGl0bGU6ICdTaG93IGZhdm9yaXRlcycsXG4gKiAgICAgaWNvblRlbXBsYXRlOiAnSGVhcnRUZW1wbGF0ZSdcbiAqICAgfVxuICogXTtcbiAqXG4gKiB0aGlzLnRocmVlRGVlVG91Y2guY29uZmlndXJlUXVpY2tBY3Rpb25zKGFjdGlvbnMpO1xuICpcbiAqIHRoaXMudGhyZWVEZWVUb3VjaC5vbkhvbWVJY29uUHJlc3NlZCgpLnN1YnNjcmliZShcbiAqICAocGF5bG9hZCkgPT4ge1xuICogICAgLy8gcmV0dXJucyBhbiBvYmplY3QgdGhhdCBpcyB0aGUgYnV0dG9uIHlvdSBwcmVzZWRcbiAqICAgIGNvbnNvbGUubG9nKCdQcmVzc2VkIHRoZSAke3BheWxvYWQudGl0bGV9IGJ1dHRvbicpXG4gKiAgICBjb25zb2xlLmxvZyhwYXlsb2FkLnR5cGUpXG4gKlxuICogIH1cbiAqIClcbiAqIGBgYFxuICogQGludGVyZmFjZXNcbiAqIFRocmVlRGVlVG91Y2hRdWlja0FjdGlvblxuICogVGhyZWVEZWVUb3VjaEZvcmNlVG91Y2hcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdUaHJlZURlZVRvdWNoJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tM2R0b3VjaCcsXG4gIHBsdWdpblJlZjogJ1RocmVlRGVlVG91Y2gnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL0VkZHlWZXJicnVnZ2VuL2NvcmRvdmEtcGx1Z2luLTNkdG91Y2gnLFxuICBwbGF0Zm9ybXM6IFsnaU9TJ11cbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVGhyZWVEZWVUb3VjaCBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIFlvdSBuZWVkIGFuIGlQaG9uZSA2UyBvciBzb21lIGZ1dHVyZSB0ZWNoIHRvIHVzZSB0aGUgZmVhdHVyZXMgb2YgdGhpcyBwbHVnaW4sIHNvIHlvdSBjYW4gY2hlY2sgYXQgcnVudGltZSBpZiB0aGUgdXNlcidzIGRldmljZSBpcyBzdXBwb3J0ZWQuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fSByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYSBib29sZWFuIHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIHBsdWdpbiBpcyBhdmFpbGFibGUgb3Igbm90XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGlzQXZhaWxhYmxlKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBZb3UgY2FuIGdldCBhIG5vdGlmaWNhdGlvbiB3aGVuIHRoZSB1c2VyIGZvcmNlIHRvdWNoZXMgdGhlIHdlYnZpZXcuIFRoZSBwbHVnaW4gZGVmaW5lcyBhIEZvcmNlIFRvdWNoIHdoZW4gYXQgbGVhc3QgNzUlIG9mIHRoZSBtYXhpbXVtIGZvcmNlIGlzIGFwcGxpZWQgdG8gdGhlIHNjcmVlbi4gWW91ciBhcHAgd2lsbCByZWNlaXZlIHRoZSB4IGFuZCB5IGNvb3JkaW5hdGVzLCBzbyB5b3UgaGF2ZSB0byBmaWd1cmUgb3V0IHdoaWNoIFVJIGVsZW1lbnQgd2FzIHRvdWNoZWQuXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPFRocmVlRGVlVG91Y2hGb3JjZVRvdWNoPn0gUmV0dXJucyBhbiBvYnNlcnZhYmxlIHRoYXQgc2VuZHMgYSBgVGhyZWVEZWVUb3VjaEZvcmNlVG91Y2hgIG9iamVjdFxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIG9ic2VydmFibGU6IHRydWVcbiAgfSlcbiAgd2F0Y2hGb3JjZVRvdWNoZXMoKTogT2JzZXJ2YWJsZTxUaHJlZURlZVRvdWNoRm9yY2VUb3VjaD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBzZXR1cCB0aGUgM0QtdG91Y2ggYWN0aW9ucywgdGFrZXMgYW4gYXJyYXkgb2Ygb2JqZWN0cyB3aXRoIHRoZSBmb2xsb3dpbmdcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgKG9wdGlvbmFsKSBBIHR5cGUgdGhhdCBjYW4gYmUgdXNlZCBgb25Ib21lSWNvblByZXNzZWRgIGNhbGxiYWNrXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0aXRsZSBUaXRsZSBmb3IgeW91ciBhY3Rpb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IHN1YnRpdGxlIChvcHRpb25hbCkgQSBzaG9ydCBkZXNjcmlwdGlvbiBmb3IgeW91ciBhY3Rpb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IGljb25UeXBlIChvcHRpb25hbCkgQ2hvb3NlIGJldHdlZW4gUHJvaGliaXQsIENvbnRhY3QsIEhvbWUsIE1hcmtMb2NhdGlvbiwgRmF2b3JpdGUsIExvdmUsIENsb3VkLCBJbnZpdGF0aW9uLCBDb25maXJtYXRpb24sIE1haWwsIE1lc3NhZ2UsIERhdGUsIFRpbWUsIENhcHR1cmVQaG90bywgQ2FwdHVyZVZpZGVvLCBUYXNrLCBUYXNrQ29tcGxldGVkLCBBbGFybSwgQm9va21hcmssIFNodWZmbGUsIEF1ZGlvLCBVcGRhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGljb25UZW1wbGF0ZSAob3B0aW9uYWwpIENhbiBiZSB1c2VkIHRvIHByb3ZpZGUgeW91ciBvd24gaWNvblxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN5bmM6IHRydWVcbiAgfSlcbiAgY29uZmlndXJlUXVpY2tBY3Rpb25zKHF1aWNrQWN0aW9uczogVGhyZWVEZWVUb3VjaFF1aWNrQWN0aW9uW10pOiB2b2lkIHsgfVxuXG4gIC8qKlxuICAgKiBXaGVuIGEgaG9tZSBpY29uIGlzIHByZXNzZWQsIHlvdXIgYXBwIGxhdW5jaGVzIGFuZCB0aGlzIEpTIGNhbGxiYWNrIGlzIGludm9rZWQuXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPGFueT59IHJldHVybnMgYW4gb2JzZXJ2YWJsZSB0aGF0IG5vdGlmaWVzIHlvdSB3aGVuIGhlIHVzZXIgcHJlc3NlcyBvbiB0aGUgaG9tZSBzY3JlZW4gaWNvblxuICAgKi9cbiAgQENvcmRvdmFGdW5jdGlvbk92ZXJyaWRlKClcbiAgb25Ib21lSWNvblByZXNzZWQoKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRW5hYmxlIExpbmsgUHJldmlldy5cbiAgICogVUlXZWJWaWV3IGFuZCBXS1dlYlZpZXcgKHRoZSB3ZWJ2aWV3cyBwb3dlcmluZyBDb3Jkb3ZhIGFwcHMpIGRvbid0IGFsbG93IHRoZSBmYW5jeSBuZXcgbGluayBwcmV2aWV3IGZlYXR1cmUgb2YgaU9TOS5cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzeW5jOiB0cnVlXG4gIH0pXG4gIGVuYWJsZUxpbmtQcmV2aWV3KCk6IHZvaWQge31cblxuICAvKipcbiAgICogRGlzYWJsZWQgdGhlIGxpbmsgcHJldmlldyBmZWF0dXJlLCBpZiBlbmFibGVkLlxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN5bmM6IHRydWVcbiAgfSlcbiAgZGlzYWJsZUxpbmtQcmV2aWV3KCk6IHZvaWQge31cbn1cbiJdfQ==