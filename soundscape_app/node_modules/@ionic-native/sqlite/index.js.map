{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/sqlite/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EACL,OAAO,EACP,YAAY,EACZ,eAAe,EACf,gBAAgB,EAChB,iBAAiB,EACjB,MAAM,EACP,MAAM,oBAAoB,CAAC;;;;;IAyD1B,sBAAmB,eAAoB;QAApB,oBAAe,GAAf,eAAe,CAAK;KAAI;IAS3C,qCAAc,aAAC,WAA4C,KAAU;IAErE;;;OAGG;;;;;IAKH,kCAAW;;;;cAAC,EAA+B;QACzC,MAAM,CAAC;KACR;IAED;;;OAGG;;;;;IAEH,sCAAe;;;;cAAC,EAAmC;QACjD,MAAM,CAAC;KACR;IAKD,2CAAoB,kBAAW;IAE/B;;OAEG;;;;IAEH,2BAAI;;;;QACF,MAAM,CAAC;KACR;IAED;;OAEG;;;;IAEH,4BAAK;;;;QACH,MAAM,CAAC;KACR;IAED;;;OAGG;;;;;IAEH,iCAAU;;;;cAAC,SAAiB,EAAE,MAAc;QAC1C,MAAM,CAAC;KACR;IAED;;;OAGG;;;;;IAEH,+BAAQ;;;;cAAC,aAA0C;QACjD,MAAM,CAAC;KACR;IAKD,kDAA2B,kBAAW;;QAxErC,gBAAgB;;;;QAEhB,gBAAgB;;;;QAEhB,eAAe,CAAC;YACf,IAAI,EAAE,IAAI;SACX,CAAC;;;;sDACmE;;QAMpE,eAAe,CAAC;YACf,YAAY,EAAE,CAAC;YACf,UAAU,EAAE,CAAC;SACd,CAAC;;;;mDAGD;;QAMA,eAAe,EAAE;;;;uDAGjB;;QAEA,eAAe,CAAC;YACf,IAAI,EAAE,IAAI;SACX,CAAC;;;;4DAC6B;;QAK9B,eAAe,EAAE;;;;4CAGjB;;QAKA,eAAe,EAAE;;;;6CAGjB;;QAMA,eAAe,EAAE;;;;kDAGjB;;QAMA,eAAe,EAAE;;;;gDAGjB;;QAEA,eAAe,CAAC;YACf,IAAI,EAAE,IAAI;SACX,CAAC;;;;mEACoC;uBA3IxC;;SAgEa,YAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA4HG,0BAAiB;;;;IAC3C;;;;;;;OAOG;;;;;;;;;IAEH,uBAAM;;;;;;;;cAAC,MAA4B;QACjC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,YAAY,CAAC,YAAY,CACvB,MAAM,EACN,UAAC,EAAO,IAAK,OAAA,OAAO,CAAC,IAAI,YAAY,CAAC,EAAE,CAAC,CAAC,EAA7B,CAA6B,EAC1C,MAAM,CACP,CAAC;SACH,CAAC,CAAC;KACJ;IAED;;;OAGG;;;;;IAEH,yBAAQ;;;;;QACN,MAAM,CAAC;KACR;IAED;;;OAGG;;;;;IAEH,yBAAQ;;;;;QACN,MAAM,CAAC;KACR;IAED;;;;OAIG;;;;;;IAEH,+BAAc;;;;;cAAC,MAA4B;QACzC,MAAM,CAAC;KACR;;gBA/CF,UAAU;;;QAUR,YAAY,EAAE;;;;wCASd;;QAMA,OAAO,EAAE;;;;0CAGT;;QAMA,OAAO,EAAE;;;;0CAGT;;QAOA,OAAO,EAAE;;;;gDAGT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA9CU,MAAM;QARlB,MAAM,CAAC;YACN,UAAU,EAAE,QAAQ;YACpB,SAAS,EAAE,cAAc;YACzB,MAAM,EAAE,wBAAwB;YAChC,IAAI,EAAE,uDAAuD;YAC7D,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,CAAC;SAClD,CAAC;OAEW,MAAM,EA+ClB;iBA3OD;EA4L4B,iBAAiB;SAAhC,MAAM","sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  Cordova,\n  CordovaCheck,\n  CordovaInstance,\n  InstanceProperty,\n  IonicNativePlugin,\n  Plugin\n} from '@ionic-native/core';\n\ndeclare const sqlitePlugin: any;\n\nexport interface SQLiteDatabaseConfig {\n  /**\n   * Name of the database. Example: 'my.db'\n   */\n  name: string;\n  /**\n   * Location of the database. Example: 'default'\n   */\n  location?: string;\n  /**\n   * iOS Database Location. Example: 'Library'\n   */\n  iosDatabaseLocation?: string;\n  /**\n   * support opening pre-filled databases with https://github.com/litehelpers/cordova-sqlite-ext\n   */\n  createFromLocation?: number;\n  /**\n   * support encrypted databases with https://github.com/litehelpers/Cordova-sqlcipher-adapter\n   */\n  key?: string;\n}\n\n/**\n * @hidden\n */\nexport interface DbTransaction {\n  executeSql: (\n    sql: any,\n    values?: any[],\n    success?: Function,\n    error?: Function\n  ) => void;\n}\n\n/**\n * @hidden\n */\nexport interface SQLiteTransaction extends DbTransaction {\n  start: () => void;\n  addStatement: DbTransaction['executeSql'];\n  handleStatementSuccess: (handler: Function, response: any) => void;\n  handleStatementFailure: (handler: Function, response: any) => void;\n  run: () => void;\n  abort: (txFailure: any) => void;\n  finish: () => void;\n  abortFromQ: (sqlerror: any) => void;\n}\n\n/**\n * @hidden\n */\nexport class SQLiteObject {\n  constructor(public _objectInstance: any) {}\n\n  @InstanceProperty databaseFeatures: { isSQLitePluginDatabase: boolean };\n\n  @InstanceProperty openDBs: any;\n\n  @CordovaInstance({\n    sync: true\n  })\n  addTransaction(transaction: (tx: SQLiteTransaction) => void): void {}\n\n  /**\n   * @param fn {Function}\n   * @returns {Promise<any>}\n   */\n  @CordovaInstance({\n    successIndex: 2,\n    errorIndex: 1\n  })\n  transaction(fn: (tx: DbTransaction) => void): Promise<any> {\n    return;\n  }\n\n  /**\n   * @param fn {Function}\n   * @returns {Promise<any>}\n   */\n  @CordovaInstance()\n  readTransaction(fn: (tx: SQLiteTransaction) => void): Promise<any> {\n    return;\n  }\n\n  @CordovaInstance({\n    sync: true\n  })\n  startNextTransaction(): void {}\n\n  /**\n   * @returns {Promise<any>}\n   */\n  @CordovaInstance()\n  open(): Promise<any> {\n    return;\n  }\n\n  /**\n   * @returns {Promise<any>}\n   */\n  @CordovaInstance()\n  close(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Execute SQL on the opened database. Note, you must call `create` first, and\n   * ensure it resolved and successfully opened the database.\n   */\n  @CordovaInstance()\n  executeSql(statement: string, params?: any[]): Promise<any> {\n    return;\n  }\n\n  /**\n   * @param sqlStatements {Array<string | string[] | any>}\n   * @returns {Promise<any>}\n   */\n  @CordovaInstance()\n  sqlBatch(sqlStatements: (string | string[] | any)[]): Promise<any> {\n    return;\n  }\n\n  @CordovaInstance({\n    sync: true\n  })\n  abortallPendingTransactions(): void {}\n}\n\n/**\n * @name SQLite\n *\n * @description\n * Access SQLite databases on the device.\n *\n * @usage\n *\n * ```typescript\n * import { SQLite, SQLiteObject } from '@ionic-native/sqlite';\n *\n * constructor(private sqlite: SQLite) { }\n *\n * ...\n *\n * this.sqlite.create({\n *   name: 'data.db',\n *   location: 'default'\n * })\n *   .then((db: SQLiteObject) => {\n *\n *\n *     db.executeSql('create table danceMoves(name VARCHAR(32))', [])\n *       .then(() => console.log('Executed SQL'))\n *       .catch(e => console.log(e));\n *\n *\n *   })\n *   .catch(e => console.log(e));\n *\n * ```\n *\n * @classes\n * SQLiteObject\n * @interfaces\n * SQLiteDatabaseConfig\n * SQLiteTransaction\n */\n@Plugin({\n  pluginName: 'SQLite',\n  pluginRef: 'sqlitePlugin',\n  plugin: 'cordova-sqlite-storage',\n  repo: 'https://github.com/litehelpers/Cordova-sqlite-storage',\n  platforms: ['Android', 'iOS', 'macOS', 'Windows']\n})\n@Injectable()\nexport class SQLite extends IonicNativePlugin {\n  /**\n   * Open or create a SQLite database file.\n   *\n   * See the plugin docs for an explanation of all options: https://github.com/litehelpers/Cordova-sqlite-storage#opening-a-database\n   *\n   * @param config {SQLiteDatabaseConfig} database configuration\n   * @return Promise<SQLiteObject>\n   */\n  @CordovaCheck()\n  create(config: SQLiteDatabaseConfig): Promise<SQLiteObject> {\n    return new Promise((resolve, reject) => {\n      sqlitePlugin.openDatabase(\n        config,\n        (db: any) => resolve(new SQLiteObject(db)),\n        reject\n      );\n    });\n  }\n\n  /**\n   * Verify that both the Javascript and native part of this plugin are installed in your application\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  echoTest(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Automatically verify basic database access operations including opening a database\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  selfTest(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Deletes a database\n   * @param config {SQLiteDatabaseConfig} database configuration\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  deleteDatabase(config: SQLiteDatabaseConfig): Promise<any> {\n    return;\n  }\n}\n"]}